{"version":3,"sources":["next-weapp-background-audio.js"],"names":[],"mappingsfile":"next-weapp-background-audio.js","sourcesContent":["(function() {\n  var global = global || this || window || Function('return this')();\n  var nx = global.nx || require('next-js-core2');\n  var nxClassify = nx.classify || require('next-classify');\n  var DEFAULT_OPTIONS = { title: '未命名', autoplay: false, onChange: nx.noop };\n  var EVENTS = [\n    'canplay',\n    'waiting',\n    'error',\n    'play',\n    'pause',\n    'seeking',\n    'seeked',\n    'ended',\n    'stop',\n    'timeUpdate',\n    'next',\n    'prev'\n  ];\n\n  var PROP_HOOKS = {\n    current: 'currentTime'\n  };\n\n  var NxWeappBackgroundAudio = nx.declare('nx.WeappBackgroundAudio', {\n    statics: {\n      STATUS: {\n        error: -1,\n        init: 0,\n        play: 1,\n        pause: 2,\n        loaded: 3,\n        ended: 4,\n        canplay: 5\n      }\n    },\n    properties: {\n      times: {\n        get: function() {\n          return {\n            total: this.audio.duration,\n            current: this.audio.currentTime\n          };\n        }\n      },\n      status: {\n        get: function() {\n          return this._status;\n        }\n      }\n    },\n    methods: {\n      init: function(inOptions) {\n        this.options = nx.mix(null, DEFAULT_OPTIONS, inOptions);\n        this.audio = wx.getBackgroundAudioManager();\n        this._status = NxWeappBackgroundAudio.STATUS.init;\n        this.attachEvents();\n        nx.forIn(\n          this.options,\n          function(key, value, target) {\n            if (key !== 'src' || target.autoplay) {\n              this.prop(key, value);\n            }\n          },\n          this\n        );\n      },\n      destroy: function() {},\n      attachEvents: function() {\n        var self = this;\n        EVENTS.forEach(function(name) {\n          var method = 'on' + nxClassify(name);\n          self.audio[method](function() {\n            self.options.onChange({ type: name });\n          });\n        });\n      },\n      prop: function(inKey, inValue) {\n        var key = PROP_HOOKS[inKey] || inKey;\n        if (typeof inValue === 'undefined') {\n          return this.audio[key];\n        }\n        this.audio[key] = inValue;\n      },\n      play: function() {\n        var src = this.options.src;\n        if (this.audio.src && src) {\n          this.audio.play();\n        } else {\n          this.audio.src = src;\n        }\n      },\n      move: function(inValue) {\n        this.audio.seek(inValue);\n      },\n      'pause,stop': function(inName) {\n        return function() {\n          return this.audio[inName].apply(this.audio, arguments);\n        };\n      }\n    }\n  });\n\n  if (typeof module !== 'undefined' && module.exports) {\n    module.exports = NxWeappBackgroundAudio;\n  }\n})();\n"]}